import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio

BOT_TOKEN = "7675249718:AAG8HqJTsUu2zKjfm7taw_9EIPzqeNFF71E"

logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å: {chat_id: –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞}
user_start_dates = {}

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def get_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É")],
        [KeyboardButton("–£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É")],
        [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É")],
        [KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–∞—Ç—ã")]
    ], one_time_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in user_start_dates:
        user_start_dates[chat_id] = None
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=get_menu_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /setdate YYYY-MM-DD
async def set_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_str = context.args[0]
        start_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        user_start_dates[update.effective_chat.id] = start_date
        await update.message.reply_text(f" –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {start_date}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –æ—Ç —ç—Ç–æ–π –¥–∞—Ç—ã.")
    except (IndexError, ValueError):
        await update.message.reply_text(" –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /setdate YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setdate 2025-05-11)")

# –ö–æ–º–∞–Ω–¥–∞ /removedate
async def remove_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in user_start_dates and user_start_dates[chat_id]:
        user_start_dates[chat_id] = None
        await update.message.reply_text(" –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(" –£ –≤–∞—Å –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /status
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in user_start_dates and user_start_dates[chat_id]:
        await update.message.reply_text(f" –í–∞—à–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –¥–∞—Ç–∞: {user_start_dates[chat_id]}")
    else:
        await update.message.reply_text(" –í—ã –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ /setdate YYYY-MM-DD")

# –ö–æ–º–∞–Ω–¥–∞ /help - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–∞—Ç—ã
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    instructions = (
        " **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–∞—Ç—ã**:\n\n"
        "1. –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/setdate YYYY-MM-DD`.\n"
        "   –ü—Ä–∏–º–µ—Ä: `/setdate 2025-05-11`\n"
        "2. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/removedate`.\n"
        "3. –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/status`.\n\n"
        " –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –¥–∞—Ç—ã."
    )
    await update.message.reply_text(instructions)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def daily_check(app):
    today = datetime.now().date()
    for chat_id, start_date in user_start_dates.items():
        if start_date:
            delta_days = (today - start_date).days
            if delta_days >= 0 and delta_days % 7 == 0:
                try:
                    await app.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –°–µ–≥–æ–¥–Ω—è {delta_days // 7 + 1}-—è –Ω–µ–¥–µ–ª—è.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É" in text:
        await set_date(update, context)
    elif "—É–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É" in text:
        await remove_date(update, context)
    elif "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞—Ç—É" in text:
        await status(update, context)
    elif "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏" in text:
        await help(update, context)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setdate", set_date))
    app.add_handler(CommandHandler("removedate", remove_date))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler = AsyncIOScheduler()

    # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ daily_check –Ω–∞ 22:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    scheduler.add_job(
        daily_check,
        trigger="cron",
        hour=1,
        minute=3,
        args=[app]
    )

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è)
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())