import os
import asyncio
import logging
from datetime import datetime, timedelta
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from telegram import Update
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞—Ç
user_start_dates = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ —É—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –¥–∞—Ç—ã.\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞: /setdate YYYY-MM-DD\n"
        "–£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—É: /removedate"
    )

async def set_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD. –ü—Ä–∏–º–µ—Ä: /setdate 2024-10-01")
        return
    try:
        start_date = datetime.strptime(context.args[0], "%Y-%m-%d").date()
        user_start_dates[update.effective_chat.id] = start_date
        
        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 10:00
        reminder_time = start_date + timedelta(weeks=1)
        reminder_time = reminder_time.replace(hour=2, minute=28, second=0, microsecond=0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(send_reminder, "date", run_date=reminder_time, args=[update.effective_chat.id])
        
        await update.message.reply_text(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {start_date}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {reminder_time}.")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π YYYY-MM-DD.")

async def remove_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if user_start_dates.pop(update.effective_chat.id, None):
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text("–î–∞—Ç–∞ –µ—â—ë –Ω–µ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="–û—à–∏–±–∫–∞:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def send_reminder(chat_id):
    await bot.send_message(chat_id, text="üìö –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –Ω–∞ https://learn.astanait.edu.kz!")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def run():
    global bot
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    bot = app.bot

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setdate", set_date))
    app.add_handler(CommandHandler("removedate", remove_date))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–æ–∑–¥–∞—ë—Ç event loop —Å–∞–º)
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio

    nest_asyncio.apply()

    loop = asyncio.get_event_loop()
    loop.run_until_complete(run())
