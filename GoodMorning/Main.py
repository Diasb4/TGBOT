import requests
from datetime import datetime
from collections import defaultdict
import asyncio
import random
import logging
from logging.handlers import RotatingFileHandler
import subprocess
import sys
from telethon import TelegramClient, errors
from dotenv import load_dotenv
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_directory = "logs"
if not os.path.exists(log_directory):
    os.makedirs(log_directory)

log_file = os.path.join(log_directory, "telegram_bot.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        RotatingFileHandler(log_file, maxBytes=5*1024*1024, backupCount=5)
    ]
)

def save_users(data, filename="users.json"):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_users(filename="users.json"):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
phone = os.getenv("PHONE")
username = os.getenv("USERNAME")
session_file = os.getenv("SESSION_FILE")
api_key = os.getenv("WEATHER_API_KEY")
city = os.getenv("CITY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API OpenWeatherMap
api_key = "5fc94082b0bd5d73c10e14c959ac190a"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –Ω–æ–≤—ã–π API-–∫–ª—é—á
city = "Astana"
weather_url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&units=metric&appid={api_key}&lang=ru"

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–º–∞–π–ª–∏–∫–∏)
morning_greetings = ["–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º", "–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ"]
morning_wishes = ["—É—Å–ø–µ—Ö–æ–≤", "–±–æ–¥—Ä–æ—Å—Ç–∏", "—Ä–∞–¥–æ—Å—Ç–∏", "—ç–Ω–µ—Ä–≥–∏–∏"]
morning_extras = ["—Å–µ–≥–æ–¥–Ω—è", "–Ω–∞ –¥–µ–Ω—å", "—Å —É—Ç—Ä–∞"]

# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
night_greetings = ["–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–î–æ–±—Ä–æ–π –Ω–æ—á–∏", "–¢–∏—Ö–æ–π –Ω–æ—á–∏"]
night_wishes = ["—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤", "—Ö–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞", "–∫—Ä–µ–ø–∫–æ–≥–æ —Å–Ω–∞"]
night_extras = ["–Ω–∞ –Ω–æ—á—å", "–¥–æ —É—Ç—Ä–∞", "–≤ —Ç–∏—à–∏–Ω–µ"]

# –°–ø–∏—Å–∫–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏ –Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
morning_emojis = [
    "Ÿ©(‚óï‚Äø‚óïÔΩ°)€∂", "<(Ôø£Ô∏∂Ôø£)>", "(Ôº†Ôºæ‚ó°Ôºæ)", "(‚âß‚ó°‚â¶)", "Ôºº(Ôø£‚ñΩÔø£)Ôºè", "‚ï∞(*¬¥Ô∏∂`*)‚ïØ", "(‚ó†‚Äø‚óï)", "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
    " ò‚Äø ò", "(Œ∏‚ÄøŒ∏)", " ò‚Äø ò", "(‚óî‚Äø‚óî)", "( ò·¥ó ò‚úø)", "(. ‚ùõ ·¥ó ‚ùõ.)", "(‚âß‚ñΩ‚â¶)", "( ‚ïπ‚ñΩ‚ïπ )", "(‚òÜ‚ñΩ‚òÜ)", "(‚óç‚Ä¢·¥ó‚Ä¢‚óç)", "<(Ôø£Ô∏∂Ôø£)>", "(‚úø^‚Äø^)", "(‚ó° œâ ‚ó°)",
    "(ÔΩ°‚Ä¢ÃÄ·¥ó-)‚úß", "( Íàç·¥óÍàç)", "( ¬¥‚ó°‚Äø„Çù‚ó°`)"
]
night_emojis = [
    "Ÿ©(‚óï‚Äø‚óïÔΩ°)€∂", "<(Ôø£Ô∏∂Ôø£)>", "(Ôº†Ôºæ‚ó°Ôºæ)", "(‚âß‚ó°‚â¶)", "Ôºº(Ôø£‚ñΩÔø£)Ôºè", "‚ï∞(*¬¥Ô∏∂`*)‚ïØ", "(‚ó†‚Äø‚óï)", "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
    " ò‚Äø ò", "(Œ∏‚ÄøŒ∏)", " ò‚Äø ò", "(‚óî‚Äø‚óî)", "( ò·¥ó ò‚úø)", "(. ‚ùõ ·¥ó ‚ùõ.)", "(‚âß‚ñΩ‚â¶)", "( ‚ïπ‚ñΩ‚ïπ )",
    "(‚òÜ‚ñΩ‚òÜ)", "(‚óç‚Ä¢·¥ó‚Ä¢‚óç)", "<(Ôø£Ô∏∂Ôø£)>", "(‚úø^‚Äø^)", "(‚ó° œâ ‚ó°)",
    "(ÔΩ°‚Ä¢ÃÄ·¥ó-)‚úß", "( Íàç·¥óÍàç)", "( ¬¥‚ó°‚Äø„Çù‚ó°`)"
]


# –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è "–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π" (—É—Ç—Ä–æ)
adventure_synonyms_morning = [
    "–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ã", "–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏", "—Å–æ—Ä–≤–∏–≥–æ–ª–æ–≤—ã",
    "–ø–µ—Ä–≤–æ–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª–∏", "—Å—Ç—Ä–∞–Ω–Ω–∏–∫–∏", "–∏—Å–∫–∞—Ç–µ–ª–∏ –Ω–æ–≤–æ–≥–æ", "—ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã", "–≥–µ—Ä–æ–∏ –¥–Ω—è"
]

# –°–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è "–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π" (–Ω–æ—á—å)
adventure_synonyms_night = [
    "–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏", "–ø–µ—Ä–≤–æ–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª–∏", "—Å—Ç—Ä–∞–Ω–Ω–∏–∫–∏",
    "–º–µ—á—Ç–∞—Ç–µ–ª–∏", "–ø–æ–∫–æ—Ä–∏—Ç–µ–ª–∏ —Å–Ω–æ–≤", "–∑–≤—ë–∑–¥–Ω—ã–µ —Å—Ç—Ä–∞–Ω–Ω–∏–∫–∏"
]

# –°–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞ –∏ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏
users_and_messages_good_morning = [
    {'user_id': -1001293963473, 'key': '—Å–∫–ª–∞–¥ –º–µ–º–æ–≤ —Å –Ω–∏–∂–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞'},
    {'user_id': -1002250858069, 'key': '–ø–µ—Ä–≤–∞—à–∏'},
    {'user_id': -1002331611327, 'key': '–°–µ—à–Ω–∏–∫–∏ –¥–æ—Ä–æ–≥–∏–µ'},
    {'user_id': -1002231527911, 'key': '–≥—Ä—É–ø–ø–∞'},
    {'user_id': -1001997403257, 'key': '—Ä–µ–º—É–¥–ª–∏–∫–∏'},
    {'user_id': -1001909414801, 'key': '–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π'},
    {'user_id': -1002442667162, 'key': '–∞–º–±–∞—Å–∞–¥–æ—Ä–∏–∫–∏ —Ñ–ª—É–¥'},
    {'user_id': -1002147993797, 'key': '–∫–∞–Ω–∞–ª'},
    {'user_id': -1002203836183, 'key': '–°–ø–æ—Ä—Ç–∏–∫–∏'},
    {'user_id': -1002311901510, 'key': '–†–∏—Ä–∏ –∏ –µ–µ –ø–æ–¥–ø–∏—Å–æ—Ç–∞'},
    {'user_id': -1001760986011, 'key': '–ê–Ω–æ–Ω—ã'},
    {'user_id': -1001977582154, 'key': '–ú–µ–≥–∞–º–∞–π–Ω–¥—ã'},
    {'user_id': -1001446142829, 'key': '–°—Ç–∞—Ñ—Ñ –ì–µ–Ω–∏–µ–≤'},
    {'user_id': 769050344, 'key': '–ö–∞–ª–∏'},
]

users_and_messages_good_night = [
    {'user_id': -1001293963473, 'key': '—Å–∫–ª–∞–¥ –º–µ–º–æ–≤ —Å –Ω–∏–∂–Ω–µ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞'},
    {'user_id': -1002250858069, 'key': '–ø–µ—Ä–≤–∞—à–∏'},
    {'user_id': -1002331611327, 'key': '–°–µ—à–Ω–∏–∫–∏ –¥–æ—Ä–æ–≥–∏–µ'},
    {'user_id': -1002231527911, 'key': '–≥—Ä—É–ø–ø–∞'},
    {'user_id': -1001997403257, 'key': '—Ä–µ–º—É–¥–ª–∏–∫–∏'},
    {'user_id': -1001909414801, 'key': '–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π'},
    {'user_id': -1002442667162, 'key': '–∞–º–±–∞—Å–∞–¥–æ—Ä–∏–∫–∏ —Ñ–ª—É–¥'},
    {'user_id': -1002147993797, 'key': '–∫–∞–Ω–∞–ª'},
    {'user_id': -1002203836183, 'key': '–°–ø–æ—Ä—Ç–∏–∫–∏'},
    {'user_id': -1002311901510, 'key': '–†–∏—Ä–∏ –∏ –µ–µ –ø–æ–¥–ø–∏—Å–æ—Ç–∞'},
    {'user_id': -1001760986011, 'key': '–ê–Ω–æ–Ω—ã'},
    {'user_id': -1001977582154, 'key': '–ú–µ–≥–∞–º–∞–π–Ω–¥—ã'},
    {'user_id': -1001446142829, 'key': '–°—Ç–∞—Ñ—Ñ –ì–µ–Ω–∏–µ–≤'},
    {'user_id': 769050344, 'key': '–ö–∞–ª–∏'},
]

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤
save_users(users_and_messages_good_morning, "morning_users.json")
save_users(users_and_messages_good_night, "night_users.json")

users_and_messages_good_morning = load_users("morning_users.json")
users_and_messages_good_night = load_users("night_users.json")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def get_weather_today():
    try:
        response = requests.get(weather_url, timeout=10)
        response.raise_for_status()
        data = response.json()

        if response.status_code != 200:
            raise Exception(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")

        if "list" not in data:
            raise KeyError(f"–ö–ª—é—á 'list' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API. –û—Ç–≤–µ—Ç: {data}")

        daily_temps = defaultdict(lambda: {
            "max": float("-inf"),
            "min": float("inf"),
            "temps": [],
            "weather": [],
            "wind_speeds": [],
            "rain": 0.0,
        })

        for entry in data["list"]:
            dt = datetime.fromtimestamp(entry["dt"])
            day_key = dt.strftime("%a %d")
            temp = entry["main"]["temp"]
            weather_desc = entry["weather"][0]["description"]
            wind_speed = entry["wind"]["speed"]
            rain_volume = entry.get("rain", {}).get("3h", 0.0)

            daily_temps[day_key]["temps"].append(temp)
            daily_temps[day_key]["max"] = max(daily_temps[day_key]["max"], temp)
            daily_temps[day_key]["min"] = min(daily_temps[day_key]["min"], temp)
            daily_temps[day_key]["weather"].append(weather_desc)
            daily_temps[day_key]["wind_speeds"].append(wind_speed)
            daily_temps[day_key]["rain"] += rain_volume

        today = list(daily_temps.items())[0]
        day, temps = today
        max_temp = round(temps["max"])
        min_temp = round(temps["min"])
        weather_conditions = temps["weather"]
        most_common_weather = max(set(weather_conditions), key=weather_conditions.count)
        avg_wind_speed = round(sum(temps["wind_speeds"]) / len(temps["wind_speeds"]), 1)
        total_rain = temps["rain"]

        # üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Å–æ–≤–µ—Ç
        if max_temp < 0:
            weather_tip = "–û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, –æ–¥–µ–≤–∞–π—Ç–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–µ–ø–ª–æ!"
        elif max_temp < 10:
            weather_tip = "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —Ç—ë–ø–ª—É—é –æ–¥–µ–∂–¥—É."
        elif max_temp < 20:
            weather_tip = "–ù–µ–º–Ω–æ–≥–æ —Å–≤–µ–∂–æ, –ª—É—á—à–µ –≤–∑—è—Ç—å –ª—ë–≥–∫—É—é –∫—É—Ä—Ç–∫—É."
        elif max_temp < 30:
            weather_tip = "–û—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞, –Ω–æ –∫–µ–ø–∫–∞ –∏ –≤–æ–¥–∞ –Ω–µ –ø–æ–º–µ—à–∞—é—Ç!"
        else:
            weather_tip = "–û—á–µ–Ω—å –∂–∞—Ä–∫–æ, –ø–µ–π—Ç–µ –ø–æ–±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–ª–Ω—Ü–∞."

        # üå¨Ô∏è –í–µ—Ç—Ä–µ–Ω–æ –ª–∏?
        wind_tip = ""
        if avg_wind_speed > 8:
            wind_tip = "–°–µ–≥–æ–¥–Ω—è –≤–µ—Ç—Ä–µ–Ω–æ, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ —É–ª–∏—Ü–µ."

        # üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–æ –ª–∏?
        rain_tip = ""
        if total_rain > 0:
            rain_tip = "–í–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç."

        tips = "\n".join(filter(None, [weather_tip, wind_tip, rain_tip]))

        return f"–ü–æ–≥–æ–¥–∞ –≤ –ê—Å—Ç–∞–Ω–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({day}): {max_temp}¬∞/{min_temp}¬∞, {most_common_weather}\n{tips}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None



def generate_morning_message(key, include_weather=False):
    greeting = random.choice(morning_greetings)
    wish = random.choice(morning_wishes)
    extra = random.choice(morning_extras)
    emoji = random.choice(morning_emojis)

    if "–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç—ã" in key or "–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π" in key:
        key = random.choice(adventure_synonyms_morning)

    message = f"{greeting}, {key}, {wish} {extra} {emoji}"

    if include_weather:
        weather = get_weather_today()
        if weather:
            message += f"\n{weather}"
    return message


def generate_night_message(key):
    greeting = random.choice(night_greetings)
    wish = random.choice(night_wishes)
    extra = random.choice(night_extras)
    emoji = random.choice(night_emojis)

    if "–∏—Å–∫–∞—Ç–µ–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π" in key:
        key = random.choice(adventure_synonyms_night)

    return f"{greeting}, {key}, {wish} {extra} {emoji}"

async def send_messages(client, messages_list, is_morning=False, batch_size=5):
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    random.shuffle(messages_list)

    sent_chats = set()
    last_chat_id = None

    # –ß–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É
    weather_chats = {-1002331611327, -1002250858069, -1002147993797}  # –°–µ—à–Ω–∏–∫–∏ –¥–æ—Ä–æ–≥–∏–µ –∏ –ø–µ—Ä–≤–∞—à–∏

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–ø–∏—Å–∫–∞
    for i in range(0, len(messages_list), batch_size):
        batch = messages_list[i:i + batch_size]
        for item in batch:
            user_id = item['user_id']
            key = item['key']
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É —Ç–æ–ª—å–∫–æ –¥–ª—è –°–µ—à–Ω–∏–∫–æ–≤ –∏ –ø–µ—Ä–≤–∞—à–µ–π
            include_weather = is_morning and user_id in weather_chats
            message = generate_morning_message(key, include_weather) if is_morning else generate_night_message(key)

            if user_id == last_chat_id:
                delay = random.uniform(20, 25)
            else:
                delay = random.uniform(30, 40)
            logging.info(f"Waiting {delay:.2f} seconds before sending to chat ID: {user_id}")
            await asyncio.sleep(delay)

            if not client.is_connected():
                logging.warning(f"Client disconnected. Attempting to reconnect to chat ID: {user_id}")
                for attempt in range(3):
                    try:
                        await client.connect()
                        if await client.is_user_authorized():
                            logging.info(f"Reconnected successfully to chat ID: {user_id}")
                            break
                    except Exception as e:
                        logging.error(f"Reconnection attempt {attempt + 1}/3 failed: {e}")
                        await asyncio.sleep(10)
                else:
                    logging.error(f"Failed to reconnect after 3 attempts for chat ID: {user_id}")
                    continue

            try:
                await client.send_message(user_id, message)
                logging.info(f"Message sent to chat with ID: {user_id}: {message}")
                sent_chats.add(user_id)
            except errors.FloodWaitError as e:
                logging.warning(f"Flood wait detected for {e.seconds} seconds. Pausing...")
                await asyncio.sleep(e.seconds + 5)
            except Exception as e:
                logging.error(f"Error while sending to chat ID {user_id}: {e}")
            last_chat_id = user_id
        if i + batch_size < len(messages_list):
            logging.info(f"Pausing 60 seconds before next batch...")
            await asyncio.sleep(60)

    message_type = "—É—Ç—Ä–µ–Ω–Ω–∏–µ" if is_morning else "–Ω–æ—á–Ω—ã–µ"
    logging.info(f"–í—Å–µ {message_type} —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

    if is_morning and os.name == 'nt':
        logging.info("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        try:
            result = subprocess.run(
                ["shutdown", "/s", "/t", "10"],
                capture_output=True,
                text=True,
                check=True,
                timeout=15
            )
            logging.info(f"–ö–æ–º–ø—å—é—Ç–µ—Ä –±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥. –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: {result.stdout}")
        except subprocess.TimeoutExpired as e:
            logging.error(f"–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {e.stdout} {e.stderr}")
        except subprocess.CalledProcessError as e:
            logging.error(
                f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤—ã–∫–ª—é—á–µ–Ω–∏—è: –∫–æ–¥ {e.returncode}, –≤—ã–≤–æ–¥: {e.stdout}, –æ—à–∏–±–∫–∞: {e.stderr}")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {str(e)}")
    elif os.name == 'nt':
        try:
            result = subprocess.run(
                ["rundll32.exe", "powrprof.dll,SetSuspendState", "0,1,0"],
                capture_output=True,
                text=True,
                check=True,
                timeout=15
            )
            logging.info("–ü–æ—Å–ª–µ –Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}")
    else:
        logging.info("–°–∏—Å—Ç–µ–º–∞ –Ω–µ Windows, –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

async def main():
    max_retries = 5
    retry_delay = 30
    connection_params = {'connection_retries': 10, 'timeout': 120}

    for attempt in range(max_retries):
        try:
            async with TelegramClient(session_file, api_id, api_hash, **connection_params) as client:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                await client.start(phone=lambda: "+77085083767")
                logging.info("Client successfully connected")

                logging.info(f"Received arguments: {sys.argv}")
                if len(sys.argv) > 1:
                    arg = sys.argv[1].lower().strip()
                    logging.info(f"Processed argument: {arg}")
                    if arg == 'morning':
                        logging.info("Manual launch of morning messages...")
                        await send_messages(client, users_and_messages_good_morning, is_morning=True)
                    elif arg == 'night':
                        logging.info("Manual launch of night messages...")
                        await send_messages(client, users_and_messages_good_night, is_morning=False)
                    else:
                        logging.warning(f"Unknown argument: {arg}. Exiting.")
                else:
                    logging.warning("Argument not specified. Use 'morning' or 'night' to launch.")
                break

        except (errors.FloodWaitError, errors.SessionPasswordNeededError, OSError, TimeoutError) as e:
            logging.error(f"Connection error (attempt {attempt + 1}/{max_retries}): {str(e)}")
            if attempt < max_retries - 1:
                logging.info(f"Retrying connection in {retry_delay} seconds...")
                await asyncio.sleep(retry_delay)
            else:
                logging.error("Exceeded maximum number of connection attempts. Exiting.")
                break
        finally:
            if 'client' in locals() and client.is_connected():
                await client.disconnect()
                logging.info("Client disconnected")

if __name__ == '__main__':
    asyncio.run(main())